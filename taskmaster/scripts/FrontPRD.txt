<context>
# Overview  
O Frontend do ArQuiz é a interface de usuário para o micro SaaS educacional de avaliações competitivas. Ele permite que Professores/Apresentadores gerenciem conteúdo e competições, e que Alunos/Participantes participem e vejam seus resultados. O objetivo é fornecer uma experiência de usuário intuitiva, responsiva e engajadora, implementada com Next.js, TypeScript, Shadcn/UI e Tailwind CSS.

# Core Frontend Features  
Detalhes baseados no [MasterPlan](mdc:docs/masterPlan.md) e [Frontend Guide](mdc:docs/frontendDevelopmentGuide.md).

- **Para Professores/Apresentadores**:
  - Interface para inserção de transcrições (texto).
  - Visualização e interface de edição para questionários gerados pela IA.
  - Formulários para criação e gerenciamento de salas de competição (links/códigos).
  - Dashboard para monitoramento em tempo real do desempenho dos alunos na competição.
  - Visualização de relatórios detalhados e estatísticas.
  - Gerenciamento de conta e configurações.

- **Para Alunos/Participantes**:
  - Interface de acesso simplificado via link ou código.
  - Tela de espera pré-competição.
  - Interface principal da competição: exibição de perguntas, alternativas, temporizador, submissão de respostas.
  - Visualização de ranking em tempo real.
  - Tela de resultados pós-competição (pontuação, colocação).

# User Experience  
- **Perfis de Usuário**:
  - **Professor/Apresentador**: Foco em criação, gerenciamento e análise. Dashboard centralizado.
  - **Aluno/Participante**: Foco na participação fluida e feedback imediato. Interface limpa e direta.
- **Fluxos Principais (UI)**:
  - **Professor**: Login -> Dashboard -> Upload Transcrição -> Ver/Editar Questionário -> Criar Sala -> Compartilhar Código/Link -> Monitorar Sala -> Ver Relatórios.
  - **Aluno**: Acessar com Código/Link -> Registrar Nome -> Sala de Espera -> Responder Perguntas -> Ver Ranking/Resultados.
- **Princípios de Design (Baseado no [MasterPlan](mdc:docs/masterPlan.md) Seção 6 e [Frontend Guide](mdc:docs/frontendDevelopmentGuide.md))**:
  - Minimalista e limpo, focado na usabilidade.
  - Totalmente responsivo (mobile-first).
  - Feedback visual claro (cores, animações sutis) usando componentes Shadcn/UI e Tailwind.
  - Layouts distintos para áreas de Professor e Aluno.
  - Consistência visual garantida pelo Tailwind e temas customizados do Shadcn/UI.
</context>
<PRD>
# Technical Architecture (Frontend)  
Baseado no [Guia de Desenvolvimento Frontend](mdc:docs/frontendDevelopmentGuide.md).

- **Framework**: Next.js (v14+ - App Router)
- **Linguagem**: TypeScript
- **UI**: Shadcn/UI & Tailwind CSS
- **Gerenciamento de Estado**:
  - **Server State**: React Server Components (RSC), `fetch` API (ou SWR/React Query).
  - **Client State**: Zustand/Jotai (global/compartilhado), `useState`/`useReducer` (local).
  - **URL State**: `useSearchParams`, Rotas Dinâmicas.
  - **Mutações**: Server Actions.
- **Roteamento**: Next.js App Router (file-based).
- **Requisições API (Client-side)**: `fetch`, SWR, ou React Query para chamar Route Handlers ou APIs externas.
- **WebSockets**: `socket.io-client` gerenciado em Client Components.
- **Testes**: Jest + React Testing Library.
- **Estrutura**: Organização de pastas `/app`, `/components`, `/lib` conforme convenções do App Router e Shadcn/UI. Distinção clara entre Server Components (`.tsx`) e Client Components (`'use client'`).

# Development Roadmap (Frontend)  
Mapeamento das fases do [MasterPlan](mdc:docs/masterPlan.md) (Seção 8) para entregáveis do frontend.

- **Fase 1: MVP (Minimum Viable Product)**
  - UI de Autenticação básica (login/registro simples).
  - Formulário de input de texto para transcrição.
  - Visualização simples do questionário gerado (sem edição avançada).
  - UI para criação de sala (gerar código).
  - UI para aluno entrar na sala (inserir código, nome).
  - Tela de espera simples.
  - Interface de competição básica (mostrar pergunta/alternativas, selecionar, enviar).
  - Tela de resultado final simples (pontuação/ranking básico).
  - Estilização mínima com Shadcn/Tailwind para funcionalidade.

- **Fase 2: Feature Enhancement**
  - Interface de edição de perguntas/questionários.
  - UI para configurar níveis de dificuldade.
  - Sistema completo de pontuação e ranking em tempo real (integração WebSocket).
  - UI do temporizador na tela de competição.
  - Visualização de relatórios avançados (tabelas, gráficos básicos).
  - Melhorias gerais de UX/UI.

- **Fase 3: Scale and Advanced Features**
  - Implementação de suporte a múltiplos idiomas (i18n) na UI.
  - UI para opções de customização avançada (temas, logos).
  - Implementação de elementos de gamificação na UI (ex: exibição de emblemas).
  - Otimizações de performance do frontend (code splitting, lazy loading).

- **Fase 4: Monetization and Growth**
  - UI para diferentes planos de assinatura (caso aplicável).
  - Componentes visuais para destacar funcionalidades pagas vs gratuitas.
  - UI para integrações com sistemas externos (se houver).

# Logical Dependency Chain (Frontend)
Ordem de construção sugerida para funcionalidades do frontend.

1.  Inicializar projeto Next.js, configurar TypeScript, Tailwind CSS, Shadcn/UI.
2.  Definir Layouts Raiz (`/app/layout.tsx`), Layout de Autenticação (`/app/(auth)/layout.tsx`), Layout Principal da Aplicação (`/app/(app)/layout.tsx`).
3.  Implementar páginas e componentes de Autenticação (Login, Registro) e integrar com `NextAuth.js` ou sistema JWT manual. Proteger rotas com Middleware.
4.  Implementar a funcionalidade de input/upload de transcrição (Professor).
5.  Implementar a visualização básica do Questionário/Perguntas (Professor).
6.  Implementar formulário de criação de Sala (Professor).
7.  Implementar formulário para Aluno entrar na Sala (Código/Link + Nome).
8.  Implementar a Tela de Espera (Aluno).
9.  Implementar a Interface de Competição principal (Aluno): Exibir Pergunta/Alternativas, Selecionar Resposta, Submeter via Server Action ou API call.
10. Configurar conexão WebSocket (`socket.io-client`) em Client Components relevantes (ex: Sala de Competição, Dashboard do Professor).
11. Implementar lógica de estado (Zustand/Jotai/Local) para receber e exibir atualizações em tempo real (ranking, próxima pergunta, etc.).
12. Implementar Dashboard básico de Monitoramento (Professor).
13. Implementar visualização de Resultados/Relatórios básicos (Aluno e Professor).
14. Refatorar e refinar componentes, adicionar testes (Jest/RTL).
15. Implementar funcionalidades das fases subsequentes (Edição de Perguntas, Relatórios Avançados, etc.).

# Risks and Mitigations (Frontend)  
- **Complexidade da UI/UX**:
  - *Risco*: Interfaces de edição, dashboards em tempo real e a competição podem se tornar complexas.
  - *Mitigação*: Usar o sistema de componentes do Shadcn/UI, dividir em componentes menores e reutilizáveis, seguir princípios de design claros, prototipagem e testes de usabilidade.
- **Gerenciamento de Estado**:
  - *Risco*: Gerenciar estado do servidor, estado do cliente (local e global) e estado de URL de forma consistente pode ser desafiador.
  - *Mitigação*: Seguir as melhores práticas do Next.js App Router (RSC por padrão), usar Zustand/Jotai para estado global complexo no cliente, Server Actions para mutações, `useSearchParams` para estado de URL.
- **Sincronização em Tempo Real**:
  - *Risco*: Garantir que todos os clientes recebam atualizações (ranking, perguntas) de forma consistente e com baixa latência via WebSockets. Lidar com desconexões.
  - *Mitigação*: Design cuidadoso dos eventos WebSocket, tratamento robusto de eventos no cliente, feedback visual para o usuário sobre o status da conexão, estratégias de reconexão. Usar stores (Zustand/Jotai) para centralizar o estado real-time.
- **Compatibilidade Cross-Browser/Device**:
  - *Risco*: UI pode renderizar ou se comportar de forma diferente em diversos navegadores e tamanhos de tela.
  - *Mitigação*: Usar Tailwind CSS para design responsivo, testar em navegadores populares (Chrome, Firefox, Safari, Edge) e diferentes viewports (desktop, tablet, mobile).
- **Performance do Frontend**:
  - *Risco*: Aplicação pode ficar lenta, especialmente com muitos dados ou componentes complexos.
  - *Mitigação*: Aproveitar otimizações do Next.js (RSC, Streaming, Code Splitting), `React.memo` para Client Components, otimizar imagens, analisar bundles (`@next/bundle-analyzer`), lazy loading.

# Appendix  
- [Guia de Desenvolvimento Frontend](mdc:docs/frontendDevelopmentGuide.md)
- [MasterPlan Geral](mdc:docs/masterPlan.md)
- (Futuro) Links para Mockups/Protótipos de UI.
</PRD> 